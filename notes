queue:
#include <queue>

queue<int*> q;
if(!q.empty()) return;
q.push()
q.pop() //returns null
q.front() //takes a pick








iterator: *it can be assigned like a normal pointer



########################THESE ARE NOT SAFE TO USE:
set max and min in C++
#include <limits>
double max = std::numeric_limits<double>::max();
double inf = std::numeric_limits<double>::infinity();
double inf = std::numeric_limits<int>::infinity();
#######################THESE ARE NOT SAFE TO USE:


vector<int>a; 
a.size() //gives int
a.empty() //gives bool


#include <unordered_set>


copy set to vector: You need to specify the vector size before hand. Vector has size 0 initially unless you change it!
	vector<int> intersect_vect(intersect.size());
	copy(intersect.begin(), intersect.end(), intersect_vect.begin());


check if set contains the item:
if( mySet.find(elem) != mySet.end() ) then it contains and mySet.find() returns and iter to that element

mySet.erase(item);
mySet.insert(item);







#include <string>
search string: 
found = str.find('a')
if(found == string::npos)

str.erase(found) //removes from the current up to the end
//remove the first occurance of found, found is a size_t it is index not iterator
auto found = str.find('s');
if(found != string::npos)
	str.erase(found,1);

str.erase(str.end()-1) //removes the last
str.erase(str.begin()) //removes the first



Vector sort:
std::sort() //sorts a vector in place
